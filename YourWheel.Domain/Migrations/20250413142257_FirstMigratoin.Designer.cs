// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YourWheel.Domain;

#nullable disable

namespace YourWheel.Domain.Migrations
{
    [DbContext(typeof(YourWheelDbContext))]
    [Migration("20250413142257_FirstMigratoin")]
    partial class FirstMigratoin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarUser", b =>
                {
                    b.Property<Guid>("Carid")
                        .HasColumnType("uuid")
                        .HasColumnName("carid");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Carid", "Userid")
                        .HasName("CarUser_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("CarUser", (string)null);
                });

            modelBuilder.Entity("MasterOrder", b =>
                {
                    b.Property<Guid>("Masterid")
                        .HasColumnType("uuid")
                        .HasColumnName("masterid");

                    b.Property<Guid>("Orderid")
                        .HasColumnType("uuid")
                        .HasColumnName("orderid");

                    b.HasKey("Masterid", "Orderid")
                        .HasName("MasterOrder_pkey");

                    b.HasIndex("Orderid");

                    b.ToTable("MasterOrder", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.AppUser", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("appuserid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CurrentLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("currentlanguageid")
                        .HasDefaultValueSql("get_default_language()");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("isonline");

                    b.Property<DateTime?>("LastConnected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastconnected")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastDisconected")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastdisconected");

                    b.Property<string>("LastIPAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("lastipaddress");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("AppUserId")
                        .HasName("AppUser_pkey");

                    b.HasIndex("CurrentLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("carid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Namemark")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("namemark");

                    b.HasKey("CarId")
                        .HasName("Car_pkey");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Color", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("colorid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("ColorId")
                        .HasName("Color_pkey");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Fabricator", b =>
                {
                    b.Property<Guid>("FabricatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("fabricatorid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Country")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("FabricatorId")
                        .HasName("Fabricator_pkey");

                    b.ToTable("Fabricator", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("languageid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("LanguageId")
                        .HasName("Language_pkey");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Master", b =>
                {
                    b.Property<Guid>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("masterid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("positionid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<DateTime?>("WorkExperienceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("workexperiencedate");

                    b.HasKey("MasterId")
                        .HasName("Master_pkey");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("Master", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("materialid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("colorid");

                    b.Property<Guid>("FabricatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fabricatorid");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.HasKey("MaterialId")
                        .HasName("Material_pkey");

                    b.HasIndex("ColorId");

                    b.HasIndex("FabricatorId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("orderid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateend");

                    b.Property<DateTime?>("DateExecute")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateexecute");

                    b.Property<DateTime>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateorder")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("discount");

                    b.Property<Guid?>("MajorId")
                        .HasColumnType("uuid")
                        .HasColumnName("majorid");

                    b.Property<Guid?>("PlaceOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("placeorderid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("statusid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex("MajorId");

                    b.HasIndex("PlaceOrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.PlaceOrder", b =>
                {
                    b.Property<Guid>("PlaceorderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("placeorderid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("PlaceorderId")
                        .HasName("PlaceOrder_pkey");

                    b.ToTable("PlaceOrder", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("positionid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("PositionId")
                        .HasName("Position_pkey");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("roleid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("Role_pkey");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("statusid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("StatusId")
                        .HasName("Status_pkey");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("Url")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("url");

                    b.HasKey("SupplierId")
                        .HasName("Supplier_pkey");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.TypeWork", b =>
                {
                    b.Property<Guid>("TypeworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("typeworkid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("TypeworkId")
                        .HasName("TypeWork_pkey");

                    b.ToTable("TypeWork", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("roleid")
                        .HasDefaultValueSql("get_default_role()");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("UserId")
                        .HasName("User_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Work", b =>
                {
                    b.Property<Guid>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("workid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("discount");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("materialid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("orderid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<Guid?>("TypeWorkId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeworkid");

                    b.Property<Guid?>("WorkPlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workplaceid");

                    b.HasKey("WorkId")
                        .HasName("Work_pkey");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TypeWorkId");

                    b.ToTable("Work", (string)null);
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Car", null)
                        .WithMany()
                        .HasForeignKey("Carid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_car");

                    b.HasOne("YourWheel.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user");
                });

            modelBuilder.Entity("MasterOrder", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Master", null)
                        .WithMany()
                        .HasForeignKey("Masterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mater");

                    b.HasOne("YourWheel.Domain.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.AppUser", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Language", "CurrentLanguage")
                        .WithMany("AppUsers")
                        .HasForeignKey("CurrentLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_language_appuser");

                    b.HasOne("YourWheel.Domain.Models.User", "User")
                        .WithMany("AppUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_appuser");

                    b.Navigation("CurrentLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Master", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Position", "Position")
                        .WithMany("Masters")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_master_position");

                    b.HasOne("YourWheel.Domain.Models.User", "User")
                        .WithMany("Masters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_master");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Material", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Color", "Color")
                        .WithMany("Materials")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_color_material");

                    b.HasOne("YourWheel.Domain.Models.Fabricator", "Fabricator")
                        .WithMany("Materials")
                        .HasForeignKey("FabricatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fubricator_material");

                    b.HasOne("YourWheel.Domain.Models.Supplier", "Supplier")
                        .WithMany("Materials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_material");

                    b.Navigation("Color");

                    b.Navigation("Fabricator");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Order", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Order", "Major")
                        .WithMany("InverseMajor")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_major_order");

                    b.HasOne("YourWheel.Domain.Models.PlaceOrder", "Placeorder")
                        .WithMany("Orders")
                        .HasForeignKey("PlaceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_placeorder_order");

                    b.HasOne("YourWheel.Domain.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_status_order");

                    b.HasOne("YourWheel.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_order");

                    b.Navigation("Major");

                    b.Navigation("Placeorder");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.User", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Work", b =>
                {
                    b.HasOne("YourWheel.Domain.Models.Material", "Material")
                        .WithMany("Works")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_material_work");

                    b.HasOne("YourWheel.Domain.Models.Order", "Order")
                        .WithMany("Works")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_work");

                    b.HasOne("YourWheel.Domain.Models.TypeWork", "Typework")
                        .WithMany("Works")
                        .HasForeignKey("TypeWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_typework_work");

                    b.Navigation("Material");

                    b.Navigation("Order");

                    b.Navigation("Typework");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Color", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Fabricator", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Language", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Material", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Order", b =>
                {
                    b.Navigation("InverseMajor");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.PlaceOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Position", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.Supplier", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.TypeWork", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("YourWheel.Domain.Models.User", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Masters");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
